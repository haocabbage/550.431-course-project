library(data.table)
library(dplyr)
library(xgboost)
data.train <- fread("~/Desktop/facebook/train.csv", colClasses=list(character="place_id"))
train.end <- max(data.train$time)
num.x1 <- 100
num.y1 <- 200
temp <- data.train[, .(place_id, new.x1 = as.integer(floor(x/(10+1E-10)*num.x1)), new.y1 = as.integer(floor(y/(10+1E-10)*num.y1)))]
temp <- temp[, .(count = .N), by=c("new.x1","new.y1","place_id")]
temp <- arrange(temp, new.x1, new.y1, desc(count))
temp$rank <- ifelse(duplicated(paste(temp$new.x1, temp$new.y1)), 0, 1)
temp[1:5]
temp <- subset(temp, count >= 2)
n.candidate <- max(temp[ , list(count=.N), by=c("new.x1","new.y1")]$count)
i <- 2
while(sum(temp$rank==0)) {
temp$rank <- ifelse(temp$rank == 0 & c(0,temp$rank[-nrow(temp)]) == i-1, i, temp$rank)
i <- i+1
}
candidate <- subset(temp, rank==1)[, .(new.x1, new.y1, place_id)]
for(i in 2:n.candidate) {
candidate <- merge(candidate, subset(temp, rank==i)[, 1:3, with=FALSE], by=c("new.x1","new.y1"), all.x=TRUE, suffixes=c("",paste0("_",i)))
}
colnames(candidate)[3:ncol(candidate)] <- paste0("candidate_", 1:n.candidate)
View(candidate)
rm(temp)
predict.interval <- 24*60*7*2
freq <- data.table(place_id=unique(data.train$place_id))
View(freq)
for(i in 1:(train.end/predict.interval)) {
temp <- data.train[train.end-predict.interval*i < time & time <= train.end-predict.interval*(i-1), .N, by="place_id"]
freq <- merge(freq, temp, by="place_id", all.x=TRUE)
colnames(freq)[ncol(freq)] <- paste0("freq_", as.integer(train.end-predict.interval*i), "-", as.integer(train.end-predict.interval*(i-1)))
}
freq[is.na(freq)] <- 0
head(freq)
i = 1
x.train <- freq[, (i+2):ncol(freq), with=FALSE]
y.train <- freq[[2]][apply(x.train, 1, sum) > 0]
x.train <- x.train[apply(x.train, 1, sum) > 0]
x.test <- freq[, 2:(ncol(freq)-i), with=FALSE]
head(x.test)
i = 10
x.train <- freq[, (i+2):ncol(freq), with=FALSE]
y.train <- freq[[2]][apply(x.train, 1, sum) > 0]
x.train <- x.train[apply(x.train, 1, sum) > 0]
x.test <- freq[, 2:(ncol(freq)-i), with=FALSE]
head(x.test)
head(freq)
library(splines)
x <- -0.2355063
bs(x, knots=c(-0.5, 0, 0.5), Boundary.knots=c(-1, 1), degree=3, intercept=T)
bs(0.2, knots=c(-0.5, 0, 0.5), Boundary.knots=c(-1, 1), degree=3, intercept=T)
bs(x, knots=c(-0.5, 0, 0.5), Boundary.knots=c(-1, 1), degree=3, intercept=T)
dnorm(1)
dnorm(2,1,2)
dnorm(2)
dnorm(2)/2
dnorm(0.5)/2
setwd("/Users/haocabbage/Desktop/550.431/550.431-course-project")
library(png)
training <- readPNG("images/training_ss_149.png")[, , 1] # training image
seg <- readPNG("images/training_seg_149.png")[, , 1] # segmented training image
rotate <- function(m) {
# rotate the square matrix 90 degree to the right
rev <- m
for (i in 1:dim(m)[1]) {
rev[i,] <- rev(m[,i])
}
return(rev)
}
training <- rotate(training)
seg <- rotate(seg)
training[training==min(training)]
length(training[training==min(training)])
length(seg[seg==0])
trans <- function(m) {
m_new <- as.vector(m)
label_value <- sort(unique(m_new))
for (i in 0:3) {
m_new[m_new == label_value[i+1]] <- i
}
return(matrix(m_new, dim(m)[1], dim(m)[2]))
}
seg <- trans(seg)
length(training[training==min(training)])
length(seg[seg==0])
length(training[training==min(training)] & seg[seg==0])
training == min(training)
training == min(training) & seg==0
!(training == min(training) & seg==0)
(training != min(training) & seg==0)
training[(training != min(training) & seg==0)]
training[(training != min(training) & seg==0)]*255
